<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>entity-framework-core on Joao Grassi&#39;s blog</title>
    <link>https://blog.joaograssi.com/tags/entity-framework-core/</link>
    <description>Recent content in entity-framework-core on Joao Grassi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Aug 2020 21:21:00 +0000</lastBuildDate><atom:link href="https://blog.joaograssi.com/tags/entity-framework-core/rss" rel="self" type="application/rss+xml" />
    <item>
      <title>Using docker-compose for your ASP.NET &#43; EF Core integration tests</title>
      <link>https://blog.joaograssi.com/using-docker-compose-for-your-asp-net-ef-core-integration-tests/</link>
      <pubDate>Thu, 13 Aug 2020 21:21:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/using-docker-compose-for-your-asp-net-ef-core-integration-tests/</guid>
      <description>This is the second post in the Integration tests in ASP.NET Core series.
  Part 1: Limitations of the EF Core in-memory database providers
  Part 2: Using docker-compose for your ASP.NET + EF Core integration tests (this post)
  Part 3: ASP.NET Core integration tests with docker-compose on Azure Pipelines
  Part 4: ASP.NET Core integration tests with docker-compose on GitHub Actions
  In this post, we will be looking at how you can run the integration tests of an ASP.</description>
    </item>
    
    <item>
      <title>Limitations of the EF Core in-memory database providers</title>
      <link>https://blog.joaograssi.com/limitations-ef-core-in-memory-database-providers/</link>
      <pubDate>Sun, 09 Aug 2020 13:08:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/limitations-ef-core-in-memory-database-providers/</guid>
      <description>This is the first post in the Integration tests in ASP.NET Core series.
  Part 1: Limitations of the EF Core in-memory database providers (this post)
  Part 2: Using docker-compose for your ASP.NET + EF Core integration tests
  Part 3: ASP.NET Core integration tests with docker-compose on Azure Pipelines
  Part 4: ASP.NET Core integration tests with docker-compose on GitHub Actions
  In this post we&amp;rsquo;ll be looking at some of the limitations you may encounter while using the EF Core in-memory database providers for your ASP.</description>
    </item>
    
    <item>
      <title>Unit testing Fluent Validation rules against EF Core entity configuration</title>
      <link>https://blog.joaograssi.com/unit-testing-fluent-validation-rules-against-your-ef-core-model/</link>
      <pubDate>Tue, 31 Dec 2019 13:46:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/unit-testing-fluent-validation-rules-against-your-ef-core-model/</guid>
      <description>In this post, I will share with you a solution to a problem that I see often when developing ASP.NET Core apps that use both Fluent Validation and Entity Framework (Core). I&amp;rsquo;ll first set the scene: Show the EF Core Entity + Configuration + Fluent Validation we&amp;rsquo;ll be working on. Next, I&amp;rsquo;ll show the actual problem that emerges with this approach and in the end how can it be improved/solved.</description>
    </item>
    
  </channel>
</rss>
