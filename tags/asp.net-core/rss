<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net-core on Joao Grassi&#39;s blog</title>
    <link>https://blog.joaograssi.com/tags/asp.net-core/</link>
    <description>Recent content in asp.net-core on Joao Grassi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Mar 2021 22:30:00 +0000</lastBuildDate><atom:link href="https://blog.joaograssi.com/tags/asp.net-core/rss" rel="self" type="application/rss" />
    <item>
      <title>Deep dive into policy-based authorization in ASP.NET Core</title>
      <link>https://blog.joaograssi.com/posts/2021/asp-net-core-deep-dive-policy-based-authorization/</link>
      <pubDate>Mon, 15 Mar 2021 22:30:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/posts/2021/asp-net-core-deep-dive-policy-based-authorization/</guid>
      <description>This is the second post in the Authorization in ASP.NET Core series.
  Part 1: Using a middleware to build a permission-based identity in ASP.NET Core
  Part 2: Deep dive into policy-based authorization in ASP.NET Core
  In the previous post, we set the foundation by creating a ClaimsIdentity containing all the logged-in user permissions with the help of a custom middleware.
Before we start using the permissions we built in the last post, I believe it makes sense to review the authorization options the framework provides us and understand how things work under the hood.</description>
    </item>
    
    <item>
      <title>Using a middleware to build a permission-based identity in ASP.NET Core</title>
      <link>https://blog.joaograssi.com/posts/2021/asp-net-core-permission-based-authorization-middleware/</link>
      <pubDate>Sat, 06 Mar 2021 16:30:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/posts/2021/asp-net-core-permission-based-authorization-middleware/</guid>
      <description>This post is the first in a series about Authorization in ASP.NET Core. I&amp;rsquo;ll guide you through a series of approaches you can use to implement authorization in your ASP.NET Core APIs, focusing on advanced/real-world scenarios. Here&amp;rsquo;s a sneak peek for what I plan to show you:
 Where to store and resolve authorization-like data How to protect your API endpoints using permission-based authorization using the built-in types in the framework Reduce duplication and make things smarter by implementing a custom Authentication Handler.</description>
    </item>
    
    <item>
      <title>ASP.NET Core integration tests with docker-compose on GitHub Actions</title>
      <link>https://blog.joaograssi.com/posts/2020/asp-net-core-integration-tests-with-docker-compose-github-actions/</link>
      <pubDate>Sat, 12 Dec 2020 14:27:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/posts/2020/asp-net-core-integration-tests-with-docker-compose-github-actions/</guid>
      <description>This is the forth (and last) post in the Integration tests in ASP.NET Core series.
  Part 1: Limitations of the EF Core in-memory database providers
  Part 2: Using docker-compose for your ASP.NET + EF Core integration tests
  Part 3: ASP.NET Core integration tests with docker-compose on Azure Pipelines
  Part 4: ASP.NET Core integration tests with docker-compose on GitHub Actions (this post)
  In the previous post of the series we saw how to create and run our tests in a CI fashion using Azure Pipelines.</description>
    </item>
    
    <item>
      <title>ASP.NET Core integration tests with docker-compose on Azure Pipelines</title>
      <link>https://blog.joaograssi.com/asp-net-core-integration-tests-with-docker-compose-azure-pipelines/</link>
      <pubDate>Sat, 22 Aug 2020 14:27:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/asp-net-core-integration-tests-with-docker-compose-azure-pipelines/</guid>
      <description>This is the third post in the Integration tests in ASP.NET Core series.
  Part 1: Limitations of the EF Core in-memory database providers
  Part 2: Using docker-compose for your ASP.NET + EF Core integration tests
  Part 3: ASP.NET Core integration tests with docker-compose on Azure Pipelines (this post)
  Part 4: ASP.NET Core integration tests with docker-compose on GitHub Actions
  In the last post of the series we saw how to use SQL Server on Docker as the database for our integration tests during local development.</description>
    </item>
    
    <item>
      <title>Using docker-compose for your ASP.NET &#43; EF Core integration tests</title>
      <link>https://blog.joaograssi.com/using-docker-compose-for-your-asp-net-ef-core-integration-tests/</link>
      <pubDate>Thu, 13 Aug 2020 21:21:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/using-docker-compose-for-your-asp-net-ef-core-integration-tests/</guid>
      <description>This is the second post in the Integration tests in ASP.NET Core series.
  Part 1: Limitations of the EF Core in-memory database providers
  Part 2: Using docker-compose for your ASP.NET + EF Core integration tests (this post)
  Part 3: ASP.NET Core integration tests with docker-compose on Azure Pipelines
  Part 4: ASP.NET Core integration tests with docker-compose on GitHub Actions
  In this post, we will be looking at how you can run the integration tests of an ASP.</description>
    </item>
    
    <item>
      <title>Limitations of the EF Core in-memory database providers</title>
      <link>https://blog.joaograssi.com/limitations-ef-core-in-memory-database-providers/</link>
      <pubDate>Sun, 09 Aug 2020 13:08:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/limitations-ef-core-in-memory-database-providers/</guid>
      <description>This is the first post in the Integration tests in ASP.NET Core series.
  Part 1: Limitations of the EF Core in-memory database providers (this post)
  Part 2: Using docker-compose for your ASP.NET + EF Core integration tests
  Part 3: ASP.NET Core integration tests with docker-compose on Azure Pipelines
  Part 4: ASP.NET Core integration tests with docker-compose on GitHub Actions
  In this post we&amp;rsquo;ll be looking at some of the limitations you may encounter while using the EF Core in-memory database providers for your ASP.</description>
    </item>
    
    <item>
      <title>Unit testing Fluent Validation rules against EF Core entity configuration</title>
      <link>https://blog.joaograssi.com/unit-testing-fluent-validation-rules-against-your-ef-core-model/</link>
      <pubDate>Tue, 31 Dec 2019 13:46:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/unit-testing-fluent-validation-rules-against-your-ef-core-model/</guid>
      <description>In this post, I will share with you a solution to a problem that I see often when developing ASP.NET Core apps that use both Fluent Validation and Entity Framework (Core). I&amp;rsquo;ll first set the scene: Show the EF Core Entity + Configuration + Fluent Validation we&amp;rsquo;ll be working on. Next, I&amp;rsquo;ll show the actual problem that emerges with this approach and in the end how can it be improved/solved.</description>
    </item>
    
    <item>
      <title>Using Azure Key Vault references with Azure Functions or App Service</title>
      <link>https://blog.joaograssi.com/using-azure-key-vault-references-with-azure-functions-appservice/</link>
      <pubDate>Sun, 25 Aug 2019 17:08:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/using-azure-key-vault-references-with-azure-functions-appservice/</guid>
      <description>TL;DR: If you are already familiar with Azure Key Vault, App Service/Functions and just want to know how to use the new Key Vault references feature in your app, you can just jump to this section: Create a system-assigned identity for our Function and follow from there.
ASP.NET Core + Configuration By now, it&amp;rsquo;s not big news that ASP.NET Core is the future of web development with .NET. Of all the great additions that ASP.</description>
    </item>
    
    <item>
      <title>Encapsulating getting access tokens from IdentityServer with a typed HttpClient and MessageHandler</title>
      <link>https://blog.joaograssi.com/typed-httpclient-with-messagehandler-getting-accesstokens-from-identityserver/</link>
      <pubDate>Wed, 06 Mar 2019 21:57:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/typed-httpclient-with-messagehandler-getting-accesstokens-from-identityserver/</guid>
      <description>Recently, I had to interact with an external API which is protected by JWT Bearer Tokens. For this, I had to get an access_token first and then set it to each request. But, this can get quite tedious very soon even if you just do it a few times. In the end, I wanted an implementation that encapsulated the need for developers to worry about getting access tokens prior to communicating with the API.</description>
    </item>
    
    <item>
      <title>Setting up Windows Subsystem for Linux with zsh &#43; oh-my-zsh &#43; ConEmu</title>
      <link>https://blog.joaograssi.com/windows-subsystem-for-linux-with-oh-my-zsh-conemu/</link>
      <pubDate>Sun, 29 Apr 2018 15:22:00 +0000</pubDate>
      
      <guid>https://blog.joaograssi.com/windows-subsystem-for-linux-with-oh-my-zsh-conemu/</guid>
      <description>The era of .NET developers being constrained on using only Windows as a platform is gone. (At least for ASP.NET). That might be very cool to some, but also scary for others. Fear of change is true. Nevertheless, it&amp;rsquo;s definitely time (if not yet) to get out of the comfort zone and get your feet wet. Being able to work with .NET on Linux/Mac is one of the points that makes me agree 100% with Nick Craver that .</description>
    </item>
    
  </channel>
</rss>
